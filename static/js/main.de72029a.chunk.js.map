{"version":3,"sources":["modules/home/Home.js","components/movies/movies.component.js","config/globalConstants.js","actions/movies.js","modules/movies/MovieList.js","modules/movies/services.js","routes/movies.routes.js","routes/index.js","reducers/index.js","reducers/movies.js","reducers/music.js","serviceWorker.js","index.js"],"names":["Home","Fragment","to","Component","MovieContainer","props","className","style","backgroundImage","movie","name","globalConstants","endPonits","moviesList","serviceHost","moviesActions","Container","styled","div","MovieList","componentDidMount","getData","Promise","resolve","reject","fetch","then","response","json","data","dispatch","type","payload","catch","state","this","movies","map","m","index","key","connect","MoviesRoutes","exact","path","component","history","createHistory","MainRoute","basename","rootReducer","combineReducers","action","music","musicList","id","text","completed","todo","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.de72029a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Home extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Link to=\"/movies\">Go to movie list</Link>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\n\nconst MovieContainer = (props) => {\n    // console.log(props.movie);\n    \n  return (\n    <React.Fragment>\n      <div className=\"h-40 w-full\">\n        <div className=\"h-full w-full bg-no-repeat\" style={{backgroundImage: `url(slices/${props.movie['poster-image']})` }} />\n        <div className=\"py-1 text-sm text-gray-500\">{props.movie.name}</div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport { MovieContainer };\n","\nconst serviceHost = \"api/\";\n\nconst globalConstants = {\n    endPonits:{\n        moviesList: serviceHost + \"CONTENTLISTINGPAGE-PAGE1.json\"\n    }\n}\n\nexport { globalConstants }","\nconst moviesActions = {\n    ADD_MOVIES_LIST:\"ADD_MOVIES_LIST\",\n    REMOVE_MOVIES_LIST:\"REMOVE_MOVIES_LIST\"\n}\n\nexport { moviesActions };","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { MovieContainer } from \"components/movies/movies.component\";\nimport { getMoviesList } from \"./services\";\nimport { moviesActions } from \"actions/movies\";\n\nconst Container = styled.div`\n  background-color: black;\n  padding: 3px;\n  header {\n    width: 100px;\n    height: 50px;\n    color: red;\n  }\n`;\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      MovieList: []\n    };\n  }\n\n  // goTo=()=>{\n  //   this.props.history.push(\"/\")\n  // }\n\n  componentDidMount = () => {\n    this.getData();\n  };\n\n  getData = () => {\n    getMoviesList()\n      .then(data => {\n        // console.log(data['page'][\"content-items\"][\"content\"]);\n        this.props.dispatch({\n          type: moviesActions.ADD_MOVIES_LIST,\n          payload: data[\"page\"][\"content-items\"][\"content\"]\n        });\n        // this.setState({ MovieList: data['page'][\"content-items\"][\"content\"] });\n      })\n      .catch(data => {\n        // console.log(data);\n        this.props.dispatch({\n          type: moviesActions.ADD_MOVIES_LIST,\n          payload: []\n        });\n      });\n  };\n\n  render() {\n    const { moviesList } = this.props.movies;\n    // console.log(moviesList);\n\n    return (\n      <Container>\n        <div className=\"header\"></div>\n        <div className=\"grid  grid-cols-3 gap-12 p-3\">\n          {moviesList.map((m, index) => {\n            return <MovieContainer key={index} movie={m} />;\n          })}\n        </div>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    movies: state.movies\n  };\n};\n\nexport default connect(mapStateToProps)(MovieList);\n","import React, { Component } from \"react\";\nimport { globalConstants } from \"config/globalConstants\";\n\nconst getMoviesList = () => {\n  return new Promise((resolve, reject) => {\n    fetch(globalConstants.endPonits.moviesList)\n      .then(response => {\n        resolve(response.json());\n      })\n      .then(data => {\n        reject(data);\n      });\n  });\n};\n\nexport { getMoviesList };\n","import React from \"react\";\nimport { Route } from 'react-router-dom'\nimport MovieList from \"modules/movies/MovieList\";\n\nconst MoviesRoutes = () => {\n  return (\n    <React.Fragment>\n      <Route exact path=\"/movies\" component={MovieList} />\n    </React.Fragment>\n  );\n};\n\nexport default MoviesRoutes;","import React from \"react\";\nimport { HashRouter, Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport { createBrowserHistory as createHistory } from \"history\";\nimport Home from \"modules/home/Home\";\nimport MoviesRoutes from \"routes/movies.routes\";\n// import MusicRoutes from \"routes/music.routes\";\nconst history = createHistory();\n\nconst MainRoute = () => {\n  return (\n    <HashRouter basename=\"/\">\n      <Router history={history}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <MoviesRoutes />\n          {/* <MusicRoutes /> */}\n        </Switch>\n      </Router>\n    </HashRouter>\n  );\n};\n\nexport default MainRoute;\n","import { createStore,combineReducers } from \"redux\";\nimport { movies } from \"reducers/movies\";\nimport { music } from \"reducers/music\";\n\nconst rootReducer = combineReducers({\n  movies,\n  music\n});\n\nexport default createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import { moviesActions } from \"actions/movies\";\n\nconst movies = (state = {moviesList:[]}, action) => {\n    switch (action.type) {\n      case moviesActions.ADD_MOVIES_LIST:\n        return {...state,moviesList:[...state.moviesList,...action.payload]};\n      case moviesActions.REMOVE_MOVIES_LIST:\n        return {...state,moviesList:[]};\n      default:\n        return state\n    }\n  }\n  \n  export { movies };","const music = (state = {musicList:[]}, action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n        return [\n          ...state,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ]\n      case 'TOGGLE_TODO':\n        return state.map(todo =>\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n        )\n      default:\n        return state\n    }\n  }\n  \n  export { music };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux'\nimport MainRoute from \"routes\";\nimport store from \"reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'assets/styles/main.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MainRoute />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}